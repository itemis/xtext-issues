module org.eclipse.xtext.example.xmleditor.GenerateXml

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var projectName = "org.eclipse.xtext.example.xmleditor"
var runtimeProject = "../${projectName}"

Workflow {
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "org.eclipse.xtext.example.xmleditor"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "windows-1252"
				lineDelimiter = "\r\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "org.eclipse.xtext.example.xmleditor.Xml"
			fileExtensions = "xml"

			parserGenerator = {
				/*
				 * By default, Xtext generates a unified ANTLR lexer/parser from the grammar.
				 * Setting the combinedGrammar flag to false ensures that a separate lexer
				 * and a separate parser are generated. This enables us to override the lexer.
				 */
				combinedGrammar = false
			}

			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the runtime module to use the runtime lexer
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = org.eclipse.xtext.generator.parser.antlr.ex.ExternalAntlrLexerFragment {
					// A grammar file with .g will be expected in this package (should be stored in src folder)
					lexerGrammar = "org.eclipse.xtext.example.xmleditor.parser.antlr.lexer.CustomInternalXmlLexer"
					runtime = true
					antlrParam = "-lib"
					// This is the folder where the lexer will be created
					antlrParam = "${runtimeProject}/src-gen/org/eclipse/xtext/example/xmleditor/parser/antlr/lexer"
				}
			}
			
			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the ui module to use the content assistant lexer
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = org.eclipse.xtext.generator.parser.antlr.ex.ExternalAntlrLexerFragment {
					// A grammar file with .g will be expected in this package (should be stored in src folder)
					lexerGrammar = "org.eclipse.xtext.example.xmleditor.ide.contentassist.antlr.lexer.CustomInternalXmlLexer"
					contentAssist = true
					antlrParam = "-lib"
					// This is the folder where the lexer will be created
					antlrParam = "${runtimeProject}.ide/src-gen/org/eclipse/xtext/example/xmleditor/ide/contentassist/antlr/lexer"
				}
			}
			
			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the ui module to use the hightlighting lexer
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = org.eclipse.xtext.generator.parser.antlr.ex.ExternalAntlrLexerFragment {
					// A grammar file with .g will be expected in this package (should be stored in src folder)
					lexerGrammar = "org.eclipse.xtext.example.xmleditor.ide.highlighting.antlr.lexer.CustomInternalXmlLexer"
					highlighting = true
					antlrParam = "-lib"
					// This is the folder where the lexer will be created
					antlrParam = "${runtimeProject}.ide/src-gen/org/eclipse/xtext/example/xmleditor/ide/highlighting/antlr/lexer"
				}
			}
			
			scopeProvider = {
				generateStub = false
			}
			
			serializer = {
				generateStub = false
			}
			validator = {
				
			}
		}
	}
}
